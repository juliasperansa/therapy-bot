from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from config import TELEGRAM_TOKEN
from db import (init_db, save_message, get_role, assign_role, get_last_messages,
                get_partner_summary, get_user_summary, create_invite, use_invite, get_pair_id)
from gpt import ask_gpt

pending_roles = {}
pending_invites = {}


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text.strip()
    lowered = message.lower()

    role = get_role(user_id)
    pair_id = get_pair_id(user_id)

    print(f"[DEBUG] user_id: {user_id}, role: {role}, pair_id: {pair_id}")

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø–∞—Ä–µ –∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–ª–∏
    if not role and user_id not in pending_roles:
        pending_roles[user_id] = True
        keyboard = ReplyKeyboardMarkup([['–ú—É–∂'], ['–ñ–µ–Ω–∞']], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=keyboard
        )
        return

    # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å (–º—É–∂ –∏–ª–∏ –∂–µ–Ω–∞)
    elif user_id in pending_roles and lowered in ['–º—É–∂', '–∂–µ–Ω–∞']:
        role_value = 'husband' if lowered == '–º—É–∂' else 'wife'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞—ë—Ç –ø–∞—Ä—É, —Å–æ–∑–¥–∞—ë–º invite
        if user_id not in pending_invites:
            invite_code = f"PAIR{user_id}"  # –ø—Ä–æ—Å—Ç–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            create_invite(invite_code, user_id)
            pending_invites[user_id] = role_value

            instruction = (
                f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω—ë—Ä—É –≤–æ—Ç —Ç–∞–∫–æ–π –∫–æ–¥:\n\n"
                f"\"{invite_code}\"\n\n"
                f"üî∏ –≠—Ç–æ –∏ –µ—Å—Ç—å –∫–æ–¥ –≤–∞—à–µ–π –ø–∞—Ä—ã. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –≤–º–µ—Å—Ç–µ —Å–æ —Å–ª–æ–≤–æ–º PAIR –∏ —Ü–∏—Ñ—Ä–∞–º–∏. –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å.\n\n"
                f"üëâ –ü–∞—Ä—Ç–Ω—ë—Ä –¥–æ–ª–∂–µ–Ω:\n"
                f"1. –ü–µ—Ä–µ–π—Ç–∏ –≤ —ç—Ç–æ–≥–æ –∂–µ –±–æ—Ç–∞ (–≤ Telegram)\n"
                f"2. –í –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–æ–¥ ‚Äî –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤. –¢–æ–ª—å–∫–æ —Å–∞–º –∫–æ–¥, –∫–∞–∫ –µ—Å—Ç—å."
            )

            await update.message.reply_text(instruction)
            del pending_roles[user_id]
            return

    # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–Ω–≤–∞–π—Ç-–∫–æ–¥, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
    elif not role and message.startswith("PAIR"):
        pair_id = use_invite(message, user_id)
        if not pair_id:
            await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        keyboard = ReplyKeyboardMarkup([['–ú—É–∂'], ['–ñ–µ–Ω–∞']], one_time_keyboard=True, resize_keyboard=True)
        pending_roles[user_id] = True
        pending_invites[user_id] = pair_id
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö:", reply_markup=keyboard
        )
        return

    elif user_id in pending_roles and lowered in ['–º—É–∂', '–∂–µ–Ω–∞'] and user_id in pending_invites:
        role_value = 'husband' if lowered == '–º—É–∂' else 'wife'
        pair_id = pending_invites[user_id]
        assign_role(user_id, role_value, pair_id)
        del pending_roles[user_id]
        del pending_invites[user_id]
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º.")
        return

    # 4. –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∫–æ–≥–¥–∞ —Ä–æ–ª—å –∏ –ø–∞—Ä–∞ —É–∂–µ –µ—Å—Ç—å
    if not role or not pair_id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
        return

    save_message(user_id, pair_id, role, message)
    user_history = get_last_messages(pair_id)
    user_summary = get_user_summary(user_id)
    partner_summary = get_partner_summary(role, pair_id)

    reply = ask_gpt(
        user_history=user_history,
        partner_summary=partner_summary,
        user_summary=user_summary,
        gender="–∂–µ–Ω—Å–∫–∏–π" if role == "wife" else "–º—É–∂—Å–∫–æ–π"
    )

    await update.message.reply_text(reply)


if __name__ == "__main__":
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from config import TELEGRAM_TOKEN
from db import (init_db, save_message, get_role, assign_role, get_last_messages,
                get_partner_summary, get_user_summary, create_invite, use_invite, get_pair_id,
                get_pending_invites_older_than)
from gpt import ask_gpt

import asyncio
from telegram import Bot

pending_roles = {}
pending_invites = {}
created_pairs = set()

bot = Bot(token=TELEGRAM_TOKEN)

async def reminder_loop():
    while True:
        print("[REMINDER] Checking for old invites...")
        invites = get_pending_invites_older_than(24)
        for inviter_id, invite_code in invites:
            try:
                await bot.send_message(
                    chat_id=inviter_id,
                    text=(f"–ù–∞–ø–æ–º–∏–Ω–∞—é: –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫, –∞ –≤–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä –≤—Å—ë –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–∞—Ä–µ.\n\n"
                          f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–¥ –µ—â—ë —Ä–∞–∑: \"{invite_code}\"")
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {inviter_id}: {e}")

        await asyncio.sleep(3600)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text.strip()
    lowered = message.lower()

    role = get_role(user_id)
    pair_id = get_pair_id(user_id)

    print(f"[DEBUG] user_id: {user_id}, role: {role}, pair_id: {pair_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å, –Ω–æ –Ω–µ—Ç –ø–∞—Ä—ã ‚Äî –ø–æ–∑–≤–æ–ª—è–µ–º –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É
    if role and not pair_id:
        save_message(user_id, None, role, message)
        user_history = [message]
        user_summary = get_user_summary(user_id)
        partner_summary = "(–ø–∞—Ä—Ç–Ω—ë—Ä –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è)"

        reply = ask_gpt(
            user_history=user_history,
            partner_summary=partner_summary,
            user_summary=user_summary,
            gender="–∂–µ–Ω—Å–∫–∏–π" if role == "wife" else "–º—É–∂—Å–∫–æ–π"
        )

        await update.message.reply_text(reply)
        return

    # –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
    if role and pair_id:
        save_message(user_id, pair_id, role, message)
        user_history = get_last_messages(pair_id)
        user_summary = get_user_summary(user_id)
        partner_summary = get_partner_summary(role, pair_id)

        reply = ask_gpt(
            user_history=user_history,
            partner_summary=partner_summary,
            user_summary=user_summary,
            gender="–∂–µ–Ω—Å–∫–∏–π" if role == "wife" else "–º—É–∂—Å–∫–æ–π"
        )

        await update.message.reply_text(reply)
        return

    # –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ä–æ–ª–∏ –∏ –±–µ–∑ –∫–æ–¥–∞
    if not role and user_id not in pending_roles and user_id not in pending_invites:
        pending_roles[user_id] = True
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("–ú—É–∂")], [KeyboardButton("–ñ–µ–Ω–∞")]],
            one_time_keyboard=True,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å: –ú—É–∂ –∏–ª–∏ –ñ–µ–Ω–∞"
        )
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=keyboard
        )
        return

    # –í—ã–±–æ—Ä —Ä–æ–ª–∏ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞
    if user_id in pending_roles and lowered in ['–º—É–∂', '–∂–µ–Ω–∞']:
        role_value = 'husband' if lowered == '–º—É–∂' else 'wife'
        invite_code = f"PAIR{user_id}"
        create_invite(invite_code, user_id)
        assign_role(user_id, role_value, None)
        pending_invites[user_id] = invite_code
        del pending_roles[user_id]

        instruction = (
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω—ë—Ä—É –≤–æ—Ç —Ç–∞–∫–æ–π –∫–æ–¥:\n\n"
            f"\"{invite_code}\"\n\n"
            f"üî∏ –≠—Ç–æ –∏ –µ—Å—Ç—å –∫–æ–¥ –≤–∞—à–µ–π –ø–∞—Ä—ã. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –≤–º–µ—Å—Ç–µ —Å–æ —Å–ª–æ–≤–æ–º PAIR –∏ —Ü–∏—Ñ—Ä–∞–º–∏. –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å.\n\n"
            f"üëâ –ü–∞—Ä—Ç–Ω—ë—Ä –¥–æ–ª–∂–µ–Ω:\n"
            f"1. –ü–µ—Ä–µ–π—Ç–∏ –≤ —ç—Ç–æ–≥–æ –∂–µ –±–æ—Ç–∞ (–≤ Telegram)\n"
            f"2. –í –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–æ–¥ ‚Äî –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤. –¢–æ–ª—å–∫–æ —Å–∞–º –∫–æ–¥, –∫–∞–∫ –µ—Å—Ç—å."
        )

        await update.message.reply_text(instruction)
        return

    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—É
    if not role and message.startswith("PAIR"):
        new_pair_id = use_invite(message, user_id)
        if not new_pair_id:
            await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        pending_roles[user_id] = True
        pending_invites[user_id] = new_pair_id
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("–ú—É–∂")], [KeyboardButton("–ñ–µ–Ω–∞")]],
            one_time_keyboard=True,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å"
        )
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö:", reply_markup=keyboard)
        return

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if user_id in pending_roles and lowered in ['–º—É–∂', '–∂–µ–Ω–∞'] and user_id in pending_invites:
        role_value = 'husband' if lowered == '–º—É–∂' else 'wife'
        pair_id = pending_invites[user_id]
        assign_role(user_id, role_value, pair_id)
        del pending_roles[user_id]
        del pending_invites[user_id]
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º.")
        return

    if not role:
        if user_id in pending_invites:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ø–∞—Ä–µ.")
        elif user_id in pending_roles:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–ú—É–∂' –∏–ª–∏ '–ñ–µ–Ω–∞'.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
        return


if __name__ == "__main__":
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    loop = asyncio.get_event_loop()
    loop.create_task(reminder_loop())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
